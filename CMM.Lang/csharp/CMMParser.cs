//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CMM.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CMMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, FLOAT=7, INT=8;
	public const int
		RULE_expression = 0, RULE_operatorAddSub = 1, RULE_operatorMulDiv = 2, 
		RULE_number = 3;
	public static readonly string[] ruleNames = {
		"expression", "operatorAddSub", "operatorMulDiv", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "FLOAT", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CMM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CMMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CMMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CMMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public OperatorMulDivContext operatorMulDiv() {
			return GetRuleContext<OperatorMulDivContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMMVisitor<TResult> typedVisitor = visitor as ICMMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 9; Match(T__0);
				State = 10; expression(0);
				State = 11; Match(T__1);
				}
				break;
			case 3:
				{
				State = 13; number();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 26;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 24;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 16;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 17; operatorMulDiv();
						State = 18; expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 20;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 21; operatorAddSub();
						State = 22; expression(2);
						}
						break;
					}
					} 
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMMVisitor<TResult> typedVisitor = visitor as ICMMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 2, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivContext : ParserRuleContext {
		public OperatorMulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDiv; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.EnterOperatorMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.ExitOperatorMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMMVisitor<TResult> typedVisitor = visitor as ICMMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivContext operatorMulDiv() {
		OperatorMulDivContext _localctx = new OperatorMulDivContext(Context, State);
		EnterRule(_localctx, 4, RULE_operatorMulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CMMParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(CMMParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMMListener typedListener = listener as ICMMListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMMVisitor<TResult> typedVisitor = visitor as ICMMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 6, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x11', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x1B', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1E', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'\x4', '\x6', '\b', '\x2', '\x5', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', 
		'\a', '\b', '\x3', '\x2', '\t', '\n', '\x2', '%', '\x2', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'!', '\x3', '\x2', '\x2', '\x2', '\b', '#', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x11', '\b', '\x2', '\x1', '\x2', '\v', '\f', '\a', '\x3', '\x2', 
		'\x2', '\f', '\r', '\x5', '\x2', '\x2', '\x2', '\r', '\xE', '\a', '\x4', 
		'\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xF', '\x11', 
		'\x5', '\b', '\x5', '\x2', '\x10', '\n', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\f', 
		'\x4', '\x2', '\x2', '\x13', '\x14', '\x5', '\x6', '\x4', '\x2', '\x14', 
		'\x15', '\x5', '\x2', '\x2', '\x5', '\x15', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\f', '\x3', '\x2', '\x2', '\x17', '\x18', '\x5', 
		'\x4', '\x3', '\x2', '\x18', '\x19', '\x5', '\x2', '\x2', '\x4', '\x19', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\t', 
		'\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\t', '\x3', '\x2', '\x2', '\"', '\a', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\t', '\x4', '\x2', '\x2', '$', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x10', '\x1A', '\x1C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
