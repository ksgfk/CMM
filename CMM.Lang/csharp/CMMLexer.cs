//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CMM.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CMMLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, FLOAT=7, INT=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "Digit", "ExponentPart", 
		"FLOAT", "INT"
	};


	public CMMLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CMMLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "FLOAT", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CMM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CMMLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'T', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '(', '\n', '\t', '\x3', '\t', '\x6', '\t', '+', '\n', 
		'\t', '\r', '\t', '\xE', '\t', ',', '\x3', '\n', '\x6', '\n', '\x30', 
		'\n', '\n', '\r', '\n', '\xE', '\n', '\x31', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\x36', '\n', '\n', '\f', '\n', '\xE', '\n', '\x39', '\v', 
		'\n', '\x3', '\n', '\x5', '\n', '<', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x6', '\n', '@', '\n', '\n', '\r', '\n', '\xE', '\n', '\x41', '\x3', 
		'\n', '\x5', '\n', '\x45', '\n', '\n', '\x3', '\n', '\x6', '\n', 'H', 
		'\n', '\n', '\r', '\n', '\xE', '\n', 'I', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'N', '\n', '\n', '\x3', '\v', '\x6', '\v', 'Q', '\n', '\v', '\r', 
		'\v', '\xE', '\v', 'R', '\x2', '\x2', '\f', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\x2', '\x11', 
		'\x2', '\x13', '\t', '\x15', '\n', '\x3', '\x2', '\x5', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', '-', '-', 
		'/', '/', '\x2', '\\', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x5', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x1B', '\x3', '\x2', '\x2', '\x2', '\t', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\x1F', '\x3', '\x2', '\x2', '\x2', '\r', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '#', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x13', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x15', 'P', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '*', '\x2', 
		'\x2', '\x18', '\x4', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', 
		'+', '\x2', '\x2', '\x1A', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', '-', '\x2', '\x2', '\x1C', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1E', '\a', '/', '\x2', '\x2', '\x1E', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\a', ',', '\x2', '\x2', ' ', '\f', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', '\x31', '\x2', '\x2', '\"', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\t', '\x2', '\x2', '\x2', '$', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '%', '\'', '\t', '\x3', '\x2', '\x2', '&', 
		'(', '\t', '\x4', '\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', '\x2', 
		'\x2', ')', '+', '\x5', '\xF', '\b', '\x2', '*', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\x5', '\xF', '\b', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x37', '\a', 
		'\x30', '\x2', '\x2', '\x34', '\x36', '\x5', '\xF', '\b', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x11', '\t', '\x2', 
		';', ':', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', 
		'<', 'N', '\x3', '\x2', '\x2', '\x2', '=', '?', '\a', '\x30', '\x2', '\x2', 
		'>', '@', '\x5', '\xF', '\b', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\x5', '\x11', '\t', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'N', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\xF', 
		'\b', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x11', '\t', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', '/', '\x3', 
		'\x2', '\x2', '\x2', 'M', '=', '\x3', '\x2', '\x2', '\x2', 'M', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\x14', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', 
		'\x5', '\xF', '\b', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x2', '\'', ',', '\x31', '\x37', ';', '\x41', '\x44', 'I', 
		'M', 'R', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
